Exercício 1 - Função 105 - Rosenbrock

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def rosenbrock(x, D):
    """Calcula o valor da função Rosenbrock para um ponto x em D dimensões"""
    return sum(100*(x[i+1] - x[i]**2)**2 + (x[i] - 1)**2 for i in range(D-1))

# Configuração dos valores de D que serão testados
dimensoes = [2, 5, 10, 20, 30]
num_pontos = 5  # Número de pontos aleatórios para cada dimensão

# Gerar matriz de resultados
np.random.seed(42)
resultados = []

print("=== Avaliação da Função Rosenbrock para Diferentes Dimensões ===")
print("Cada linha representa uma dimensão D, cada coluna um ponto aleatório\n")

for D in dimensoes:
    linha_resultados = []
    print(f"\nD = {D}:")
    
    # Gerar alguns pontos aleatórios e calcular o valor da função
    for _ in range(num_pontos):
        x = np.random.uniform(-2, 2, D)  # Amostra no intervalo [-2, 2] para melhor visualização
        valor = rosenbrock(x, D)
        linha_resultados.append(valor)
        
        # Exibir o ponto e seu valor (apenas para D=2 para não poluir a saída)
        if D == 2:
            print(f"  Ponto: {x}, Valor: {valor:.2f}")
    
    resultados.append(linha_resultados)

# Exibir a matriz de resultados (corrigindo o aviso de escape)
print("\nMatriz de Resultados (valores da função Rosenbrock):")
print("D | Ponto", "  ".join(f"P{i+1}" for i in range(num_pontos)))
print("-" * (8 + 7*num_pontos))

for i, D in enumerate(dimensoes):
    print(f"{D:2} |", "  ".join(f"{val:6.1f}" for val in resultados[i]))

# Visualização para D=2 (superfície 3D)
if 2 in dimensoes:
    # Preparar dados para o gráfico
    x1 = np.linspace(-2, 2, 100)
    x2 = np.linspace(-1, 3, 100)
    X1, X2 = np.meshgrid(x1, x2)
    Z = np.zeros_like(X1)
    
    for i in range(X1.shape[0]):
        for j in range(X1.shape[1]):
            Z[i,j] = rosenbrock(np.array([X1[i,j], X2[i,j]]), 2)
    
    # Plotar
    fig = plt.figure(figsize=(12, 8))
    ax = fig.add_subplot(111, projection='3d')
    ax.plot_surface(X1, X2, Z, cmap='viridis', alpha=0.8)
    ax.set_title('Função Rosenbrock para D=2')
    ax.set_xlabel('x1')
    ax.set_ylabel('x2')
    ax.set_zlabel('f(x)')
    
    # Adicionar o mínimo global
    ax.scatter([1], [1], [0], color='red', s=100, label='Mínimo global (1,1)')
    ax.legend()
    
    plt.tight_layout()
    plt.show()



Exercício 2- Função 114 - Scahffer 3

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D

def scalifier3(x1, x2):
    """Calcula o valor da função Scalifier 3"""
    termo_sin = np.sin(np.cos(np.abs(x1**2 - x2**2)))**2
    denominador = 1 + 0.001*(x1**2 + x2**2)**2
    return 0.5 + (termo_sin - 0.5) / denominador

# Pontos iniciais para teste (em formato matricial)
pontos_iniciais = np.array([
    [[0.0, 1.0], [0.0, 1.253115]],    # Próximo do mínimo
    [[50.0, -50.0], [100.0, 100.0]],  # Pontos distantes
    [[1.253115, 0.0], [-2.0, 2.0]],   # Pontos interessantes
    [[5.0, 5.0], [-5.0, 5.0]]         # Pontos médios
])

# Calcula os valores da função para todos os pontos
valores = np.zeros_like(pontos_iniciais[:,:,0])
for i in range(pontos_iniciais.shape[0]):
    for j in range(pontos_iniciais.shape[1]):
        x1, x2 = pontos_iniciais[i,j]
        valores[i,j] = scalifier3(x1, x2)

# Exibe os resultados em formato matricial
print("Matriz de valores da função Scalifier 3 para diferentes pontos iniciais:")
print("-----------------------------------------------------------------------")
for i in range(pontos_iniciais.shape[0]):
    for j in range(pontos_iniciais.shape[1]):
        x1, x2 = pontos_iniciais[i,j]
        print(f"f({x1:8.3f}, {x2:8.3f}) = {valores[i,j]:.6f}", end=" | ")
    print("\n" + "-"*80)

# Visualização 3D da função
x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(x, y)
Z = scalifier3(X, Y)

fig = plt.figure(figsize=(14, 6))
ax1 = fig.add_subplot(121, projection='3d')
surf = ax1.plot_surface(X, Y, Z, cmap=cm.coolwarm, alpha=0.8)
ax1.set_title('Superfície da Função Scalifier 3')
ax1.set_xlabel('x1')
ax1.set_ylabel('x2')
ax1.set_zlabel('f(x1,x2)')
fig.colorbar(surf, shrink=0.5, aspect=5)

# Visualização de contorno com pontos iniciais
ax2 = fig.add_subplot(122)
contour = ax2.contourf(X, Y, Z, levels=20, cmap=cm.coolwarm)
ax2.set_title('Mapa de Contorno com Pontos Iniciais')
ax2.set_xlabel('x1')
ax2.set_ylabel('x2')
fig.colorbar(contour, shrink=0.5, aspect=5)

# Marca os pontos iniciais no gráfico de contorno
for i in range(pontos_iniciais.shape[0]):
    for j in range(pontos_iniciais.shape[1]):
        x1, x2 = pontos_iniciais[i,j]
        ax2.plot(x1, x2, 'o', markersize=8, label=f'({x1:.1f}, {x2:.1f})')
        
ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

Exercício 3 - Função 142 - Streched V Sine Wave Function

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def streched_v_sine_wave(x, D):
    """Calcula o valor da função Streched V Sine Wave para um vetor x de dimensão D."""
    total = 0.0
    for i in range(D - 1):
        sum_sq = x[i+1]**2 + x[i]**2
        term = (sum_sq)**0.25 * (np.sin(50 * (sum_sq)**0.1)**2 + 0.1)
        total += term
    return total

# --- Gráfico para D = 2 (Superfície 3D) ---
D = 2
x1 = np.linspace(-10, 10, 100)
x2 = np.linspace(-10, 10, 100)
X1, X2 = np.meshgrid(x1, x2)
Z = np.zeros_like(X1)

for i in range(X1.shape[0]):
    for j in range(X1.shape[1]):
        Z[i, j] = streched_v_sine_wave(np.array([X1[i, j], X2[i, j]]), D)

fig = plt.figure(figsize=(12, 5))
ax = fig.add_subplot(121, projection='3d')
ax.plot_surface(X1, X2, Z, cmap='viridis', alpha=0.8)
ax.set_xlabel('x1')
ax.set_ylabel('x2')
ax.set_zlabel('f(x)')
ax.set_title('Superfície 3D (D=2)')

# --- Gráfico de Contorno para D = 2 ---
ax2 = fig.add_subplot(122)
contour = ax2.contourf(X1, X2, Z, levels=20, cmap='viridis')
plt.colorbar(contour)
ax2.set_xlabel('x1')
ax2.set_ylabel('x2')
ax2.set_title('Mapa de Contorno (D=2)')
plt.tight_layout()
plt.show()

# --- Gráfico para D > 2 (Cortes 2D) ---
# Fixamos todas as variáveis, exceto x1 e x2, em 0.
D = 5  # Exemplo para D=5
x1 = np.linspace(-10, 10, 100)
x2 = np.linspace(-10, 10, 100)
X1, X2 = np.meshgrid(x1, x2)
Z_highD = np.zeros_like(X1)

for i in range(X1.shape[0]):
    for j in range(X1.shape[1]):
        # Fixamos x3, x4, ..., xD = 0 e variamos apenas x1 e x2.
        x = np.zeros(D)
        x[0], x[1] = X1[i, j], X2[i, j]
        Z_highD[i, j] = streched_v_sine_wave(x, D)

plt.figure(figsize=(6, 5))
contour_highD = plt.contourf(X1, X2, Z_highD, levels=20, cmap='viridis')
plt.colorbar(contour_highD)
plt.xlabel('x1')
plt.ylabel('x2')
plt.title(f'Corte 2D para D={D} (x3,..,xD=0)')
plt.show()


Exercício 4 - Função 61 - Hansen

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
from scipy.optimize import minimize

# Definindo a função de Hansen
def hansen_function(x):
    x1, x2 = x
    term1 = sum((i + 1) * np.cos(i * x1 + i + 1) for i in range(1, 5))
    term2 = sum((j + 1) * np.cos((j + 2) * x2 + j + 1) for j in range(0, 5))
    return term1 * term2

# Definindo os mínimos globais conhecidos
global_minima = np.array([
    [-7.589893, -7.708314],
    [-7.589893, -1.425128],
    [-7.589893, 4.858057],
    [-1.306708, -7.708314],
    [-1.306708, 4.858057],
    [4.976478, 4.858057],
    [4.976478, -1.425128],
    [4.976478, -7.708314]
])

# Criando grid para plotagem
x = np.linspace(-10, 10, 100)
y = np.linspace(-10, 10, 100)
X, Y = np.meshgrid(x, y)
Z = np.zeros_like(X)

for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        Z[i,j] = hansen_function([X[i,j], Y[i,j]])

# Configuração dos gráficos
plt.figure(figsize=(18, 6))

# Gráfico 1: Superfície 3D
ax1 = plt.subplot(1, 3, 1, projection='3d')
surf = ax1.plot_surface(X, Y, Z, cmap=cm.coolwarm, alpha=0.8)
ax1.set_title('Superfície da Função de Hansen')
ax1.set_xlabel('x1')
ax1.set_ylabel('x2')
ax1.set_zlabel('f(x1,x2)')
plt.colorbar(surf, ax=ax1, shrink=0.5, aspect=5)

# Gráfico 2: Curvas de nível
ax2 = plt.subplot(1, 3, 2)
contour = ax2.contourf(X, Y, Z, levels=50, cmap=cm.coolwarm)
ax2.set_title('Curvas de Nível da Função de Hansen')
ax2.set_xlabel('x1')
ax2.set_ylabel('x2')
plt.colorbar(contour, ax=ax2, shrink=0.5, aspect=5)

# Marcando todos os mínimos globais
ax2.scatter(global_minima[:,0], global_minima[:,1], color='yellow', s=50, label='Mínimos Globais')

# Gráfico 3: Zoom com dois mínimos destacados
ax3 = plt.subplot(1, 3, 3)
contour3 = ax3.contourf(X, Y, Z, levels=50, cmap=cm.coolwarm)
ax3.set_title('Dois Mínimos Globais Destacados')
ax3.set_xlabel('x1')
ax3.set_ylabel('x2')

# Selecionando dois mínimos para destacar
highlight_minima = global_minima[[0, 5]]  # Primeiro e sexto mínimo

# Marcando todos os mínimos
ax3.scatter(global_minima[:,0], global_minima[:,1], color='yellow', s=30, alpha=0.5)

# Destacando os dois mínimos escolhidos
ax3.scatter(highlight_minima[:,0], highlight_minima[:,1], color='red', s=100, 
           edgecolors='black', linewidths=1.5, label='Mínimos Destacados')

# Adicionando anotações
for i, (x1, x2) in enumerate(highlight_minima):
    ax3.annotate(f'Mínimo {i+1}\n({x1:.2f}, {x2:.2f})', 
                (x1, x2), 
                textcoords="offset points", 
                xytext=(10,10), 
                ha='center',
                bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="black", lw=1))

ax3.legend()
plt.colorbar(contour3, ax=ax3, shrink=0.5, aspect=5)

plt.tight_layout()
plt.show()

# Exibindo informações dos mínimos destacados
print("\nInformações dos Mínimos Globais Destacados:")
for i, (x1, x2) in enumerate(highlight_minima):
    print(f"Mínimo {i+1}:")
    print(f"  Coordenadas: ({x1:.6f}, {x2:.6f})")
    print(f"  Valor da função: {hansen_function([x1, x2]):.6f}\n")



Função f(x), gradiente e matriz Hessiana
import numpy as np
import time
from scipy.optimize import minimize

# Combined Rosenbrock function
def rosenbrock(x):
    fval = sum(100.0 * (x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)

    xm = x[1:-1]
    xm_m1 = x[:-2]
    xm_p1 = x[2:]
    grad = np.zeros_like(x)
    grad[1:-1] = 200 * (xm - xm_m1**2) - 400 * (xm_p1 - xm**2) * xm - 2 * (1 - xm)
    grad[0] = -400 * x[0] * (x[1] - x[0]**2) - 2 * (1 - x[0])
    grad[-1] = 200 * (x[-1] - x[-2]**2)

    n = len(x)
    H = np.zeros((n, n))
    for i in range(n):
        if i > 0:
            H[i, i - 1] = -400 * x[i - 1]
        if i < n - 1:
            H[i, i] = 1200 * x[i]**2 - 400 * x[i + 1] + 2
            H[i, i + 1] = -400 * x[i]
        else:
            H[i, i] = 200
    for i in range(n - 1):
        H[i + 1, i] = H[i, i + 1]

    return fval, grad, H

# Initial point
x0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])

# List of methods to compare
methods = {
    "Nelder-Mead": {"method": "Nelder-Mead"},
    "BFGS": {"method": "BFGS", "jac": lambda x: rosenbrock(x)[1]},
    "Newton-CG": {"method": "Newton-CG", "jac": lambda x: rosenbrock(x)[1], "hess": lambda x: rosenbrock(x)[2]},
    "trust-ncg": {"method": "trust-ncg", "jac": lambda x: rosenbrock(x)[1], "hess": lambda x: rosenbrock(x)[2]},
    "trust-krylov": {"method": "trust-krylov", "jac": lambda x: rosenbrock(x)[1], "hess": lambda x: rosenbrock(x)[2]},
    "trust-exact": {"method": "trust-exact", "jac": lambda x: rosenbrock(x)[1], "hess": lambda x: rosenbrock(x)[2]},
}

# Executa as otimizações e armazena resultados
results = {}

for name, opts in methods.items():
    start_time = time.time()
    res = minimize(lambda x: rosenbrock(x)[0], x0, **opts, options={"disp": False})
    elapsed_time = (time.time() - start_time) * 1000  # em ms

    fval, grad, hess = rosenbrock(res.x)

    results[name] = {
        "x0": x0,
        "x*": res.x,
        "fval": fval,
        "grad": grad,
        "hess": hess,
        "nfev": res.nfev,
        "njev": res.get("njev", None),
        "nhev": res.get("nhev", None),
        "time": elapsed_time,
        "success": res.success
    }

# Apresenta os resultados com alinhamento
print("\n==== Rosenbrock Results ====\n")
header = f"{'Method':<20} | {'f(x*)':>12} | {'nfev':>6} | {'njev':>6} | {'nhev':>6} | {'Time (ms)':>10} | {'Success':>8}"
print(header)
print("-" * len(header))

for method, data in results.items():
    print(f"{method:<20} | {data['fval']:12.4e} | {data['nfev']:6d} | "
          f"{data['njev'] if data['njev'] is not None else '  N/A':>6} | "
          f"{data['nhev'] if data['nhev'] is not None else '  N/A':>6} | "
          f"{data['time']:10.2f} | {str(data['success']):>8}")

    # Mostra os detalhes extras
    print(f"  x*     = {data['x*']}")
    print(f"  grad   = {np.round(data['grad'], 4)}")
    print(f"  Hessian=\n{np.round(data['hess'], 4)}\n")


exercise 2.2 questão 4

import numpy as np
from sympy import symbols, diff, Matrix, lambdify
import matplotlib.pyplot as plt

class QuadraticFunctionAnalyzer:
    def __init__(self):
        self.x1, self.x2 = symbols('x1 x2')
        self.f_sym = self.x1**2 + 2*self.x1*self.x2 + 2*self.x2**2
        self.x_bar = np.array([1, 1])
        self.d = np.array([1, -1])  # Direção de exemplo

    def compute_gradient(self):
        """Calcula o gradiente simbólico e avalia em x̄."""
        grad = [diff(self.f_sym, var) for var in (self.x1, self.x2)]
        grad_at_xbar = [expr.subs({self.x1:1, self.x2:1}) for expr in grad]
        return grad, grad_at_xbar

    def compute_hessian(self):
        """Calcula a Hessiana simbólica (constante para funções quadráticas)."""
        hessian = Matrix([[diff(diff(self.f_sym, xi), xj) for xj in (self.x1, self.x2)] 
                         for xi in (self.x1, self.x2)])
        return hessian

    def check_convexity(self, hessian):
        """Verifica se a função é convexa via autovalores da Hessiana."""
        eigenvalues = hessian.eigenvals()
        is_convex = all(val > 0 for val in eigenvalues.keys())
        return eigenvalues, is_convex

    def compute_curvature(self, hessian, d):
        """Calcula a curvatura na direção d em x̄."""
        H_numeric = np.array(hessian.subs({self.x1:1, self.x2:1})).astype(float)
        return d.T @ H_numeric @ d

    def preconditioning(self, hessian):
        """Realiza a mudança de variáveis usando decomposição de Cholesky."""
        H_numeric = np.array(hessian.subs({self.x1:1, self.x2:1})).astype(float)
        L = np.linalg.cholesky(H_numeric)
        P = L.T
        P_inv = np.linalg.inv(P)
        return P, P_inv

    def visualize(self):
        """Gera gráficos 3D e de contorno."""
        f_numeric = lambdify((self.x1, self.x2), self.f_sym, 'numpy')
        x1_vals = np.linspace(-2, 2, 100)
        x2_vals = np.linspace(-2, 2, 100)
        X1, X2 = np.meshgrid(x1_vals, x2_vals)
        Z = f_numeric(X1, X2)

        fig = plt.figure(figsize=(12, 5))
        ax1 = fig.add_subplot(121, projection='3d')
        ax1.plot_surface(X1, X2, Z, cmap='viridis', alpha=0.8)
        ax1.scatter(1, 1, f_numeric(1, 1), color='red', s=100, label='x̄ = (1,1)')
        ax1.set_title('Superfície de f(x₁, x₂)')
        ax1.set_xlabel('x₁')
        ax1.set_ylabel('x₂')

        ax2 = fig.add_subplot(122)
        contour = ax2.contour(X1, X2, Z, levels=15, cmap='viridis')
        ax2.plot(1, 1, 'ro', label='x̄ = (1,1)')
        ax2.quiver(1, 1, self.d[0], self.d[1], angles='xy', scale_units='xy', scale=1, color='blue', label='Direção d')
        ax2.set_title('Curvas de nível')
        ax2.legend()
        plt.colorbar(contour)

        plt.tight_layout()
        plt.show()

    def run_analysis(self):
        """Executa toda a análise e imprime os resultados."""
        print("="*50)
        print("ANÁLISE DA FUNÇÃO QUADRÁTICA")
        print("f(x₁, x₂) = x₁² + 2x₁x₂ + 2x₂²")
        print("="*50)

        # 1. Gradiente
        grad, grad_at_xbar = self.compute_gradient()
        print("\n1. Gradiente:")
        print(f"∇f(x₁, x₂) = {grad}")
        print(f"∇f(1, 1) = {grad_at_xbar}")

        # 2. Hessiana
        hessian = self.compute_hessian()
        print("\n2. Matriz Hessiana:")
        print(f"H_f = \n{hessian}")

        # 3. Convexidade
        eigenvalues, is_convex = self.check_convexity(hessian)
        print("\n3. Análise de Convexidade:")
        print(f"Autovalores: {eigenvalues}")
        print("A função é estritamente convexa? ", "Sim" if is_convex else "Não")

        # 4. Curvatura
        curvature = self.compute_curvature(hessian, self.d)
        print("\n4. Curvatura na Direção d:")
        print(f"Para d = {self.d}:")
        print(f"Curvatura = dᵀH_fd = {curvature:.2f}")

        # 5. Precondicionamento
        P, P_inv = self.preconditioning(hessian)
        print("\n5. Precondicionamento:")
        print(f"Matriz de transformação P:\n{P}")
        print(f"Inversa P⁻¹:\n{P_inv}")
        print("\nExemplo: x = x̄ + P⁻¹y para y = [0.5, 0.5]")
        print("x_transformado =", self.x_bar + P_inv @ np.array([0.5, 0.5]))

        # Visualização
        self.visualize()

# Executa a análise
if __name__ == "__main__":
    analyzer = QuadraticFunctionAnalyzer()
    analyzer.run_analysis()


exercise 2.2 question 5


import numpy as np
from sympy import symbols, diff, Matrix, exp, lambdify
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Definindo símbolos
x, y = symbols('x y')

# Definindo a função simbólica
f_expr = x**2 - x*y + 2*y**2 - 2*x + exp(x + y)

# Ponto e direção analisados
ponto_base = np.array([0.0, 0.0])
direcao = np.array([1.0, 1.0])

def gradiente_funcao(expr):
    grad_simbolico = [diff(expr, var) for var in (x, y)]
    grad_numerico = [float(g.subs({x: 0, y: 0})) for g in grad_simbolico]
    return grad_simbolico, grad_numerico

def hessiana_funcao(expr):
    H = Matrix([[diff(diff(expr, i), j) for j in (x, y)] for i in (x, y)])
    H_numerico = np.array(H.subs({x: 0, y: 0})).astype(float)
    return H, H_numerico

def verificar_convexidade(H):
    autovalores = np.linalg.eigvals(np.array(H.subs({x: 0, y: 0})).astype(float))
    local_convexo = all(val > 0 for val in autovalores)
    
    global_convexo = True
    for _ in range(100):
        x_val, y_val = np.random.uniform(-5, 5, 2)
        H_ponto = np.array(H.subs({x: x_val, y: y_val})).astype(float)
        if not np.all(np.linalg.eigvals(H_ponto) > 0):
            global_convexo = False
            break
            
    return autovalores, local_convexo, global_convexo

def curvatura_direcional(H_val, direcao):
    return direcao.T @ H_val @ direcao

def precondicionamento(H_val):
    L = np.linalg.cholesky(H_val)
    P = L.T
    P_inv = np.linalg.inv(P)
    return P, P_inv

def plotar_graficos(f_expr, d):
    f_lamb = lambdify((x, y), f_expr, 'numpy')
    x_vals = np.linspace(-2, 2, 100)
    y_vals = np.linspace(-2, 2, 100)
    X, Y = np.meshgrid(x_vals, y_vals)
    Z = f_lamb(X, Y)

    fig = plt.figure(figsize=(15, 6))
    
    # Superfície 3D
    ax1 = fig.add_subplot(121, projection='3d')
    surf = ax1.plot_surface(X, Y, Z, cmap='plasma', alpha=0.85)
    ax1.scatter(0, 0, f_lamb(0, 0), color='red', s=100, label='Ponto base')
    ax1.set_title('Superfície da função')
    ax1.set_xlabel('x')
    ax1.set_ylabel('y')
    fig.colorbar(surf, ax=ax1, shrink=0.5)

    # Contornos
    ax2 = fig.add_subplot(122)
    contornos = ax2.contour(X, Y, Z, levels=25, cmap='plasma')
    ax2.plot(0, 0, 'ro', label='Ponto base')
    ax2.quiver(0, 0, d[0], d[1], color='blue', scale=5, label='Direção d')
    ax2.set_title('Curvas de nível')
    ax2.legend()
    plt.colorbar(contornos)

    plt.tight_layout()
    plt.show()

def main():
    print("="*60)
    print("ANÁLISE DA FUNÇÃO: f(x, y) = x² - xy + 2y² - 2x + e^(x+y)")
    print("="*60)

    # Gradiente
    grad_sim, grad_num = gradiente_funcao(f_expr)
    print("\n1. GRADIENTE:")
    print("∇f(x, y) =")
    for g in grad_sim:
        print(f"  {g}")
    print(f"∇f(0, 0) = {grad_num}")

    # Hessiana
    H_sim, H_num = hessiana_funcao(f_expr)
    print("\n2. HESSIANA:")
    print(f"H(x, y) =\n{H_sim}")
    print(f"H(0, 0) =\n{H_num}")

    # Convexidade
    autovalores, local_cvx, global_cvx = verificar_convexidade(H_sim)
    print("\n3. CONVEXIDADE:")
    print(f"Autovalores em (0,0): {autovalores}")
    print(f"Convexa localmente? {'Sim' if local_cvx else 'Não'}")
    print(f"Convexa globalmente? {'Sim' if global_cvx else 'Não'}")

    # Curvatura
    curv = curvatura_direcional(H_num, direcao)
    print("\n4. CURVATURA NA DIREÇÃO:")
    print(f"Direção d = {direcao}")
    print(f"Curvatura em (0,0): {curv:.4f}")

    # Precondicionamento
    P, P_inv = precondicionamento(H_num)
    print("\n5. PRECONDICIONAMENTO:")
    print(f"Matriz P:\n{P}")
    print(f"Matriz P⁻¹:\n{P_inv}")
    y = np.array([0.5, 0.3])
    x_transformado = ponto_base + P_inv @ y
    print(f"x = x̄ + P⁻¹·y para y = {y}")
    print(f"x_transformado = {x_transformado}")

    # Visualização
    print("\nGerando gráficos...")
    plotar_graficos(f_expr, direcao)

# Executar o script
if __name__ == "__main__":
    main()
